<?php
namespace GodsDev\Backyard\Test;

use GodsDev\Backyard\BackyardHttp;
use GodsDev\Backyard\BackyardError;

//@todo - put into separate group as it needs access to internet

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-25 at 17:57:39.
 */
class BackyardHttpTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var BackyardHttp
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new BackyardHttp(new BackyardError);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

//    /**
//     * @covers GodsDev\Backyard\BackyardHttp::movePage
//     * @todo   Implement testMovePage().
//     */
//    public function testMovePage()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//            'This test has not been implemented yet.'
//        );
//    }

//    /**
//     * @covers GodsDev\Backyard\BackyardHttp::retrieveFromPostThenGet
//     * @todo   Implement testRetrieveFromPostThenGet().
//     */
//    public function testRetrieveFromPostThenGet()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//            'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers GodsDev\Backyard\BackyardHttp::getCurPageURL
//     * @todo   Implement testGetCurPageURL().
//     */
//    public function testGetCurPageURL()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//            'This test has not been implemented yet.'
//        );
//    }

    /**
     * @covers GodsDev\Backyard\BackyardHttp::getData
     * @todo   Implement testGetData().
     */
    public function testGetDataContent()
    {
        $url = 'http://dadastrip.cz/test/';
        $useragent = 'PHP/phpunit-testing';
        $timeout = 5;
        $customHeaders = 'x-wap-profile: http://no.web.com/|x-other-header: foo';
        $postArray = array();
        $expected = array(
    'HTTP_CODE' => 200,
    'message_body' => '=== HTTP headers ===<br/>
<b>User-Agent:</b> PHP/phpunit-testing <br/>
<b>Host:</b> dadastrip.cz <br/>
<b>Accept:</b> */* <br/>
<b>x-wap-profile:</b> http://no.web.com/ <br/>
<b>x-other-header:</b> foo <br/>
</body></html>',
    'CONTENT_TYPE' => 'text/html'            
        );
        
        $result = $this->object->getData($url, $useragent, $timeout, $customHeaders, $postArray);
        $result['message_body'] = preg_replace('/^.+\n/', '', preg_replace('/^.+\n/', '', $result['message_body']));//remove first two lines because they contain timestamp and source IP and hence are changing unnecessarily
        
        $this->assertEquals($expected, $result);
    }

    public function testGetDataRedirect()
    {
        //@todo incl. recursion (if there is)
        $url = 'http://dadastrip.cz/test';
        //delete//$orig = '{"status": "123", "text": "abc"}';
        $expected = array(
    'HTTP_CODE' => 301,
    'message_body' => '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>301 Moved Permanently</title>
</head><body>
<h1>Moved Permanently</h1>
<p>The document has moved <a href="http://dadastrip.cz/test/">here</a>.</p>
<hr>
<address>Apache/2.2.22 (Debian) Server at dadastrip.cz Port 80</address>
</body></html>
',
    'REDIRECT_URL' => 'http://dadastrip.cz/test/',
    'CONTENT_TYPE' => 'text/html; charset=iso-8859-1'            
        );
        
        $this->assertEquals($expected, $this->object->getData($url, $useragent = 'PHP/cURL', $timeout = 5, $customHeaders = false, $postArray = array()));
    }
    
    
    //@todo - make test if the method remains in Backyard
//    /**
//     * @covers GodsDev\Backyard\BackyardHttp::getHTTPstatusCode
//     * @todo   Implement testGetHTTPstatusCode().
//     */
//    public function testGetHTTPstatusCode()
//    {
//        $url = '{"status": "123", "text": "abc"}';
//        $expected = '{"status":"123","text":"abc"}';
//        
//        $this->assertEquals($expected, $this->object->getHTTPstatusCode($url));
//    }
//
//    /**
//     * @covers GodsDev\Backyard\BackyardHttp::getHTTPstatusCodeByUA
//     * @todo   Implement testGetHTTPstatusCodeByUA().
//     */
//    public function testGetHTTPstatusCodeByUA()
//    {
//        $url = '{"status": "123", "text": "abc"}';
//        $userAgent = 'sth';
//        $expected = '{"status":"123","text":"abc"}';
//        
//        $this->assertEquals($expected, $this->object->getHTTPstatusCodeByUA($url, $userAgent));
//    }
}
